#+TITLE: json2nd

* Usage

Filter to convert a JSON document with a top-level array to NDJSON (a.k.a NLJSON, new-line delimited JSON), which is generally much easier to work with, especially for a large file.

#+begin_src sh
  cat large_array.json | json2nd > object_per_line.json
#+end_src

Like a lot of filter programs you can switch from using stdin to a list of filenames, so now it acts a bit like a JSON cat that converts arrays:

#+begin_src sh
  json2nd large_array1.json large_array2.json > object_per_line.json
#+end_src

If the array you want to "unpack" is just below the surface, say:

#+begin_src json
  {
      "stuff": {
	  "things" : [1, 2, 3]
      }
  }
#+end_src

Yoy cab use the -path flag to extract it:

#+begin_src
  json2nd -path stuff.things file.json
#+end_src

For more see [[./doc/other_usage.org][other usage scenarios]].

* Installation

** Using Go

Assuming your ~$GOBIN~ directory is somewhere in your ~$PATH~ it's as simple as:

#+begin_src sh
  go install github.com/draxil/json2nd@latest
#+end_src

* Plans / what about XYZ?

** Windows style line endings ("\r\n")?

Maybe. Honesly would be getting beyond the simplicity of this thing, but I can see how it could be useful to some people. Bug me?

** What about jq?

~jq~ is great! And a lot of the time I'm running this so I can experimentally ~jq~ more quickly! But this is simpler to use as it's a single use tool, and should be faster than the equivalent jq (citation needed).  Sometimes you want UNIX philosophy sometimes you need an atomic chainsaw. Why not have both.

* Author / credits

Joe Higton <draxil@gmail.com>

* Licence

Please see the [[./LICENSE][licence file]].
